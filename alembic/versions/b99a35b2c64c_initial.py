"""initial

Revision ID: b99a35b2c64c
Revises:
Create Date: 2022-05-11 15:33:39.625883

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import app.core.models.device_state
import app.core.models.device_type
import app.core.models.int_enum_field
import app.core.models.severity_level
import app.core.models.temperature_units

# revision identifiers, used by Alembic.
revision = 'b99a35b2c64c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    device_states = op.create_table('device_states',
        sa.Column('device_state_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('device_state_id', name=op.f('pk_device_states'))
    )
    device_types = op.create_table('device_types',
        sa.Column('device_type_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('device_type_id', name=op.f('pk_device_types'))
    )
    op.create_table('plant_types',
        sa.Column('plant_type_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('scientific_name', sa.String(), nullable=False),
        sa.Column('minimum_light', sa.Integer(), nullable=True),
        sa.Column('maximum_light', sa.Integer(), nullable=True),
        sa.Column('minimum_temperature', sa.Float(), nullable=True),
        sa.Column('maximum_temperature', sa.Float(), nullable=True),
        sa.Column('minimum_humidity', sa.Float(), nullable=True),
        sa.Column('maximum_humidity', sa.Float(), nullable=True),
        sa.Column('minimum_soil_moisture', sa.Float(), nullable=True),
        sa.Column('maximum_soil_moisture', sa.Float(), nullable=True),
        sa.Column('image', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('plant_type_id', name=op.f('pk_plant_types')),
        sa.UniqueConstraint('scientific_name', name=op.f('uq_plant_types_scientific_name'))
    )
    severity_levels = op.create_table('severity_levels',
        sa.Column('severity_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('severity_id', name=op.f('pk_severity_levels'))
    )
    temperature_units = op.create_table('temperature_units',
        sa.Column('temperature_unit_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('unit', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('temperature_unit_id', name=op.f('pk_temperature_units'))
    )
    op.create_table('users',
        sa.Column('user_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('username', sa.String(), nullable=False),
        sa.Column('password_hash', sa.String(), nullable=False),
        sa.Column('oauth_token', sa.String(), nullable=True),
        sa.Column('verification_code', sa.Integer(), nullable=True),
        sa.Column('password_reset_code', sa.Integer(), nullable=True),
        sa.Column('password_reset_code_expiration', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('user_id', name=op.f('pk_users')),
        sa.UniqueConstraint('email', name=op.f('uq_users_email'))
    )
    op.create_table('devices',
        sa.Column('device_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('model', sa.String(), nullable=False),
        sa.Column('device_type_id', app.core.models.int_enum_field.IntEnumField(enum_type=app.core.models.device_type.DeviceTypeEnum), nullable=True),
        sa.Column('device_state_id', app.core.models.int_enum_field.IntEnumField(enum_type=app.core.models.device_state.DeviceStateEnum), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('ip', postgresql.INET(), nullable=True),
        sa.Column('api_version', sa.String(), nullable=True),
        sa.Column('software_version', sa.String(), nullable=True),
        sa.Column('name', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['device_state_id'], ['device_states.device_state_id'], name=op.f('fk_devices_device_state_id_device_states')),
        sa.ForeignKeyConstraint(['device_type_id'], ['device_types.device_type_id'], name=op.f('fk_devices_device_type_id_device_types')),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_devices_user_id_users'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('device_id', name=op.f('pk_devices'))
    )
    op.create_index(op.f('devices_user_id_idx'), 'devices', ['user_id'], unique=False)
    op.create_table('user_preferences',
        sa.Column('user_preference_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('temperature_unit_id', app.core.models.int_enum_field.IntEnumField(enum_type=app.core.models.temperature_units.TemperatureUnitEnum), server_default=sa.text('1'), nullable=True),
        sa.Column('confidence_rating', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['temperature_unit_id'], ['temperature_units.temperature_unit_id'], name=op.f('fk_user_preferences_temperature_unit_id_temperature_units')),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_user_preferences_user_id_users'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('user_preference_id', name=op.f('pk_user_preferences'))
    )
    op.create_table('plants',
        sa.Column('plant_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('device_id', sa.Integer(), nullable=True),
        sa.Column('plant_type_id', sa.Integer(), nullable=True),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('image', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('fk_plants_device_id_devices'), ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['plant_type_id'], ['plant_types.plant_type_id'], name=op.f('fk_plants_plant_type_id_plant_types'), ondelete='RESTRICT'),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_plants_user_id_users'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('plant_id', name=op.f('pk_plants'))
    )
    op.create_index(op.f('plants_user_id_idx'), 'plants', ['user_id'], unique=False)
    op.create_table('event_handlers',
        sa.Column('event_handler_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('plant_id', sa.Integer(), nullable=True),
        sa.Column('device_id', sa.Integer(), nullable=True),
        sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('fk_event_handlers_device_id_devices')),
        sa.ForeignKeyConstraint(['plant_id'], ['plants.plant_id'], name=op.f('fk_event_handlers_plant_id_plants')),
        sa.PrimaryKeyConstraint('event_handler_id', name=op.f('pk_event_handlers'))
    )
    op.create_table('gauge_ratings',
        sa.Column('gauge_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('plant_id', sa.Integer(), nullable=True),
        sa.Column('temperature', sa.Integer(), nullable=True),
        sa.Column('humidity', sa.Integer(), nullable=True),
        sa.Column('soil_moisture', sa.Integer(), nullable=True),
        sa.Column('light', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['plant_id'], ['plants.plant_id'], name=op.f('fk_gauge_ratings_plant_id_plants'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('gauge_id', name=op.f('pk_gauge_ratings'))
    )
    op.create_table('sensor_data',
        sa.Column('plant_id', sa.Integer(), nullable=False),
        sa.Column('time', sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column('temperature', sa.Float(), nullable=True),
        sa.Column('humidity', sa.Float(), nullable=True),
        sa.Column('soil_moisture', sa.Float(), nullable=True),
        sa.Column('light', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['plant_id'], ['plants.plant_id'], name=op.f('fk_sensor_data_plant_id_plants'), ondelete='CASCADE'),
    )
    op.execute("select create_hypertable('sensor_data', 'time')")
    op.create_index(op.f('sensor_data_plant_id_idx'), 'sensor_data', ['plant_id'], unique=False)


    op.create_table('actions',
        sa.Column('action_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('event_handler_id', sa.Integer(), nullable=True),
        sa.Column('disabled', sa.Boolean(), server_default=sa.text('FALSE'), nullable=False),
        sa.Column('last_executed', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column('action', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(['event_handler_id'], ['event_handlers.event_handler_id'], name=op.f('fk_actions_event_handler_id_event_handlers'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('action_id', name=op.f('pk_actions'))
    )
    op.create_table('alerts',
        sa.Column('alert_id', sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column('plant_id', sa.Integer(), nullable=True),
        sa.Column('device_id', sa.Integer(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('action_id', sa.Integer(), nullable=True),
        sa.Column('severity_id', app.core.models.int_enum_field.IntEnumField(enum_type=app.core.models.severity_level.SeverityLevelEnum), nullable=True),
        sa.Column('message', sa.String(), nullable=False),
        sa.Column('time', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('viewed', sa.Boolean(), server_default=sa.text('FALSE'), nullable=False),
        sa.ForeignKeyConstraint(['action_id'], ['actions.action_id'], name=op.f('fk_alerts_action_id_actions'), ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('fk_alerts_device_id_devices'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['plant_id'], ['plants.plant_id'], name=op.f('fk_alerts_plant_id_plants'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['severity_id'], ['severity_levels.severity_id'], name=op.f('fk_alerts_severity_id_severity_levels')),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_alerts_user_id_users'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('alert_id', name=op.f('pk_alerts'))
    )
    # ### end Alembic commands ###

    # add initial data
    op.bulk_insert(severity_levels, [
        {'description': 'Info'},
        {'description': 'Warning'},
        {'description': 'Critical'},
        {'description': 'Error'},
    ])
    op.bulk_insert(temperature_units, [
        {'unit': 'Fahrenheit'},
        {'unit': 'Celcius'},
    ])
    op.bulk_insert(device_states, [
        {'description': 'Connected'},
        {'description': 'Connecting'},
        {'description': 'Disconnected'},
        {'description': 'Error'},
        {'description': 'Unknown'},
    ])
    op.bulk_insert(device_types, [
        {'description': 'Sensor'},
        {'description': 'Gateway'},
        {'description': 'Other'},
    ])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('alerts')
    op.drop_table('actions')
    op.drop_index(op.f('sensor_data_time_idx'), table_name='sensor_data')
    op.drop_index(op.f('sensor_data_plant_id_idx'), table_name='sensor_data')
    op.drop_table('sensor_data')
    op.drop_table('gauge_ratings')
    op.drop_table('event_handlers')
    op.drop_index(op.f('plants_user_id_idx'), table_name='plants')
    op.drop_table('plants')
    op.drop_table('user_preferences')
    op.drop_index(op.f('devices_user_id_idx'), table_name='devices')
    op.drop_table('devices')
    op.drop_table('users')
    op.drop_table('temperature_units')
    op.drop_table('severity_levels')
    op.drop_table('plant_types')
    op.drop_table('device_types')
    op.drop_table('device_states')
    # ### end Alembic commands ###

openapi: '3.0.2'
info:
  title: Flourish
  version: '1.0'
servers:
  - url: https://{environment}.TODO:/v1
    variables:
      environment:
        default: api
        enum:
          - api       # Production
          - api.dev   # Development
paths:
  /users:
    post:
      tags:
        - Users
      description: Registers a new user
      # requestBody:
      #   required: true
        # content:
        #   application/json:
        #     schema:
        #       $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Request succeeded and a new user has been created
          headers:
            'Location':
              $ref: '#/components/headers/ResourceCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/AlreadyExists'

  /users/login:
    post:
      tags:
        - Users
      description: Authenticates user
      # requestBody:
      #   required: true
        # content:
        #   application/json:
        #     schema:
        #       $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User has succesfully authenticated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/AlreadyExists'

  /users/reset_password:
    post:
      tags:
        - Users
      description: Starts a password reset
      # requestBody:
      #   required: true
        # content:
        #   application/json:
        #     schema:
        #       $ref: '#/components/schemas/User'
      responses:
        '204':
          description: A password reset email has been sent to the specified email
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/UserID'
    get:
      tags:
        - Users
      description: Get user profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Users
      description: Update user profile
      responses:
        '204':
          description: OK. User updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Users
      description: Delete user
      responses:
        '204':
          description: OK. User deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/verify:
    parameters:
      - $ref: '#/components/parameters/UserID'
    post:
      tags:
        - Users
      description: Verifies a user who recieved a verification code
      responses:
        '204':
          description: OK. User has been verified
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/password:
    parameters:
      - $ref: '#/components/parameters/UserID'
    put:
      tags:
        - Users
      description: Update user password
      responses:
        '204':
          description: OK. User password updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  # /users/{user_id}/logout:
  #   post:
  #     tags:
  #       - User
  #     description: Logs user out

  /users/{user_id}/devices:
    parameters:
      - $ref: '#/components/parameters/UserID'
    get:
      tags:
        - Devices
      description: Lists all devices for a user
      parameters:
        - in: query
          name: device_type
          schema:
            type: string
            nullable: true
            enum:
              - 'Sensor'
              - 'Gateway'
              - 'Other'
          description: Returns all devices that match the device type. If null, returns devices with any type
        - in: query
          name: device_state
          schema:
            type: string
            nullable: true
            enum:
              - 'Connected'
              - 'Connecting'
              - 'Disconnected'
              - 'Error'
          description: Returns all devices that match the device state. If null, returns devices with any state
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Devices'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Devices
      description: Creates a new device
      responses:
        '201':
          description: Ok. New device created
          headers:
            'Location':
              $ref: '#/components/headers/ResourceCreated'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '422':
          description: Request contains invalid fields

  /users/{user_id}/devices/{device_id}:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/DeviceID'
    get:
      tags:
        - Devices
      description: Gets device information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Devices
      description: Updates device information
      responses:
        '204':
          description: OK. Device updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Devices
      description: Deletes device
      responses:
        '204':
          description: OK. Device deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  # TODO: query param time range
  /users/{user_id}/devices/{device_id}/data:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/DeviceID'
    get:
      tags:
        - Devices
      description: Gets  readings for specified period of time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorDataArray'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Devices
      description: Records new sensor reading
      responses:
        '200':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          description: Device has sent too many requests (Rate limited)

  /users/{user_id}/devices/{device_id}/metrics:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/DeviceID'
    get:
      tags:
        - Devices
      description: Gets device metrics for specified period of time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceMetrics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Devices
      description: Records new device metric
      responses:
        '200':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          description: Device has sent too many requests (Rate limited)


  /users/{user_id}/plants:
    parameters:
      - $ref: '#/components/parameters/UserID'
    get:
      tags:
        - Plants
      description: Lists all plants for a user
      # TODO: query for plant types?
      # parameters:
      responses:
        '200':
          description: OK
          # content:
            # application/json:
              # schema:
                # $ref: '#/components/schemas/Devices'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Plants
      description: Creates a new plant
      responses:
        '201':
          description: Ok. New plant created
          headers:
            'Location':
              $ref: '#/components/headers/ResourceCreated'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '422':
          description: Request contains invalid fields

  /users/{user_id}/plants/{plant_id}:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/PlantID'
    get:
      tags:
        - Plants
      description: Gets plant information
      responses:
        '200':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/Device'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Plants
      description: Updates plant information
      responses:
        '204':
          description: OK. plant updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Plants
      description: Deletes plant
      responses:
        '204':
          description: OK. Plant deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  # TODO: query param time range
  /users/{user_id}/plants/{plant_id}/data:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/PlantID'
    get:
      tags:
        - Plants
      description: Gets plant sensor readings for specified period of time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorDataArray'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/plants/{plant_id}/overrides:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/PlantID'
    get:
      tags:
        - Plants
      description: Gets user defined alert overrides for plant
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Plants
      description: Creates a new user defined alert override
      responses:
        '201':
          description: Ok. New override created
          headers:
            'Location':
              $ref: '#/components/headers/ResourceCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/plants/{plant_id}/overrides/{override_id}:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/PlantID'
      - $ref: '#/components/parameters/OverrideID'

    put:
      tags:
        - Plants
      description: Updates user defined override
      responses:
        '204':
          description: OK. Override updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Plants
      description: Deletes override
      responses:
        '204':
          description: OK. Override deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'


  /users/{user_id}/alerts:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - in: query
        name: viewed
        schema:
          type: boolean
          default: null
          nullable: true
        description: Return alerts which have been seen or not seen. By default returns all alerts
      - in: query
        name: plant_id
        schema:
          type: integer
          default: null
          nullable: true
        description: Return alerts for the user plant with the specified ID. Cannot be used with device_id query parameter
      - in: query
        name: device_id
        schema:
          type: integer
          default: null
          nullable: true
        description: Return alerts for the user device with the specified ID. Cannot be used with plant_id query parameter

    get:
      tags:
        - Alerts
      description: Returns alerts for user
      responses:
        '200':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/DeviceMetrics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/alerts/{alert_id}:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/AlertID'
    delete:
      tags:
        - Alerts
      description: Dismisses an alert
      responses:
        '204':
          description: OK. Alert deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/alerts/{alert_id}/view:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/AlertID'
    post:
      tags:
        - Alerts
      description: Marks alert as viewed
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'


  /users/{user_id}/collections:
    parameters:
      - $ref: '#/components/parameters/UserID'
    get:
      tags:
        - Collections
      description: Returns all collections for user
      responses:
        '200':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/DeviceMetrics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Collections
      description: Creates a new collection
      responses:
        '201':
          description: Ok. New collection created
          headers:
            'Location':
              $ref: '#/components/headers/ResourceCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/collections/{collection_id}:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/CollectionID'
    get:
      tags:
        - Collections
      description: Returns collection details
      responses:
        '200':
          description: OK
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/DeviceMetrics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Collections
      description: Updates collection information
      responses:
        '204':
          description: OK. Device updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Collections
      description: Deletes a collection
      responses:
        '204':
          description: OK. Collection deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/collections/{collection_id}/add:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/CollectionID'
    post:
      tags:
        - Collections
      description: Adds plants to a collection
      responses:
        '204':
          description: OK. Device updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{user_id}/collections/{collection_id}/remove:
    parameters:
      - $ref: '#/components/parameters/UserID'
      - $ref: '#/components/parameters/CollectionID'
    delete:
      tags:
        - Collections
      description: Removes plants from a collection
      responses:
        '204':
          description: OK. Device updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NoPermission'
        '404':
          $ref: '#/components/responses/NotFound'




components:
  responses:
    BadRequest:
      description: Server was unable to process request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 400
            detail: 'Server unable to process request'

    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 404
            detail: 'The specified resource was not found'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoPermission:
      description: User does not have permission to create/read/update/delete resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AlreadyExists:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:
    UserID:
      name: user_id
      in: path
      description: User ID
      required: true
      schema:
        type: integer
    DeviceID:
      name: device_id
      in: path
      description: Device ID
      required: true
      schema:
        type: integer
    PlantID:
      name: plant_id
      in: path
      description: Plant ID
      required: true
      schema:
        type: integer
    AlertID:
      in: path
      name: alert_id
      schema:
        type: integer
        nullable: false
      description: Alert ID
      required: true
    CollectionID:
      in: path
      name: collection_id
      schema:
        type: integer
        nullable: false
      description: Collection ID
      required: true
    OverrideID:
      in: path
      name: override_id
      schema:
        type: integer
        nullable: false
      description: Override ID
      required: true


  schemas:
    Response:
      type: object
      properties:
        data:
          oneOf:
            - type: object
            - type: array
              items:
                type: object
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      description: Common response object
    Error:
      type: object
      properties:
        status_code:
          type: integer
          description: HTTP status code
          example: 401
        detail:
          type: string
          description: Additional information on why the request failed
          example: User not authorized to delete device
    User:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            id:
              type: integer
              description: User ID
            email:
              type: string
    Device:
      type: object
      properties:
        id:
          type: integer
          description: Device ID
        deviceType:
          type: string
          enum:
            - Sensor
            - Gateway
            - Other
          description: Device type
        deviceState:
          type: string
          enum:
            - Connected
            - Connecting
            - Disconnected
            - Error
          description: Last known state of the device
        api_version:
          type: string
          description: Flourish API version used by the device
        model:
          type: string
          description: Device model
          nullable: true
        software_version:
          type: string
          description: Software version of device
          nullable: true
    Devices:
      type: array
      description: An array of device objects
      items:
        $ref: '#/components/schemas/Device'
    SensorDataArray:
      type: array
      description: An array of device sensor readings
      items:
        $ref: '#/components/schemas/SensorData'
    SensorData:
      type: object
      properties:
        deviceId:
          type: integer
          description: Device ID
        time:
          type: string
          description: Timestamp of sensor reading
          nullable: true
          format: date-time
        temperature:
          type: number
          description: Air temperature in Celcius
          nullable: true
        humidity:
          type: number
          description: Relative air humidity
          nullable: true
        light:
          type: integer
          description: Light level in Lux
          nullable: true
        additional:
          type: object
          description: Additional sensor readings
    DeviceMetrics:
      type: array
      description: An array of device metrics
      items:
        $ref: '#/components/schemas/DeviceMetric'
    DeviceMetric:
      type: object
      properties:
        deviceId:
          type: integer
          description: Device ID
        time:
          type: string
          description: Timestamp of metric reading
          format: date-time
        battery_level:
          type: number
          description: Battery of device
          nullable: true
        cpu_usage:
          type: number
          description: CPU usage of device (in %)
          nullable: true
        memory_used:
          type: number
          description: Memory usage of device
          nullable: true
        memory_free:
          type: number
          description: Amount of free memory of device
          nullable: true
        additional:
          type: object
          description: Additional metrics

  headers:
    ResourceCreated:
      schema:
        type: string
        example: /user/15
      description: Location of newly created resource

  securitySchemes:
    name:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://domain.test/api/oauth/dialog
          tokenUrl: https://domain.test/api/oauth/token
          scopes:
            read: example read scope
            write: example write scope

